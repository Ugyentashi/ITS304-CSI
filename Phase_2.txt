# 12190103



*******
Phase 2
*******

Using objdump -d bomb > bomb.s we are able to look at all the assembly code present 
in bomb.c 

For <phase_2> following are the set of assembly code

0000000000400ea9 <phase_2>:
  400ea9:	55                   	push   %rbp
  400eaa:	53                   	push   %rbx
  400eab:	48 83 ec 28          	sub    $0x28,%rsp   //makes a stack frame of 56 bytes
  400eaf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400eb6:	00 00 
  400eb8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  400ebd:	31 c0                	xor    %eax,%eax
  400ebf:	48 89 e6             	mov    %rsp,%rsi
  400ec2:	e8 93 05 00 00       	callq  40145a <read_six_numbers>  //We see that this phase wants an input of 6 numbers.
  400ec7:	83 3c 24 01          	cmpl   $0x1,(%rsp)
  400ecb:	74 05                	je     400ed2 <phase_2+0x29>
  400ecd:	e8 66 05 00 00       	callq  401438 <explode_bomb>
  400ed2:	48 89 e3             	mov    %rsp,%rbx
  400ed5:	48 8d 6c 24 14       	lea    0x14(%rsp),%rbp
  400eda:	8b 03                	mov    (%rbx),%eax
  400edc:	01 c0                	add    %eax,%eax
  400ede:	39 43 04             	cmp    %eax,0x4(%rbx)    // We are comparing something here
  400ee1:	74 05                	je     400ee8 <phase_2+0x3f>
  400ee3:	e8 50 05 00 00       	callq  401438 <explode_bomb>
  400ee8:	48 83 c3 04          	add    $0x4,%rbx
  400eec:	48 39 eb             	cmp    %rbp,%rbx         //Comparing something here
  400eef:	75 e9                	jne    400eda <phase_2+0x31>
  400ef1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  400ef6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  400efd:	00 00 
  400eff:	74 05                	je     400f06 <phase_2+0x5d>
  400f01:	e8 fa fb ff ff       	callq  400b00 <__stack_chk_fail@plt>
  400f06:	48 83 c4 28          	add    $0x28,%rsp 		// Closing the stack frame
  400f0a:	5b                   	pop    %rbx
  400f0b:	5d                   	pop    %rbp
  400f0c:	c3                   	retq   


Lets put in "1 2 3 4 5 6" as our test input and disas <read_six_numbers>: 
Basic command used : disas - Disassamble Code
					 i r - information register 
					 ni - next
					 u * <address> - move to particular address of code. (Note that once you have crossed the address you cannot move backward,if not bomb will explode)


Dump of assembler code for function read_six_numbers:
=> 0x00000000004015aa <+0>:     sub    $0x18,%rsp     //making a stack frame
   0x00000000004015ae <+4>:     mov    %rsi,%rdx      
   0x00000000004015b1 <+7>:     lea    0x4(%rsi),%rcx
   0x00000000004015b5 <+11>:    lea    0x14(%rsi),%rax
   0x00000000004015b9 <+15>:    mov    %rax,0x8(%rsp)
   0x00000000004015be <+20>:    lea    0x10(%rsi),%rax
   0x00000000004015c2 <+24>:    mov    %rax,(%rsp)
   0x00000000004015c6 <+28>:    lea    0xc(%rsi),%r9
   0x00000000004015ca <+32>:    lea    0x8(%rsi),%r8
   0x00000000004015ce <+36>:    mov    $0x402799,%esi       //$0x402799 is being put into %esi which is compared to our input
   0x00000000004015d3 <+41>:    mov    $0x0,%eax
   0x00000000004015d8 <+46>:    callq  0x400c30 <__isoc99_sscanf@plt>
   0x00000000004015dd <+51>:    cmp    $0x5,%eax         
   0x00000000004015e0 <+54>:    jg     0x4015e7 <read_six_numbers+61>   //if %eax is greater than 5, then we pass explode bomb. 
   0x00000000004015e2 <+56>:    callq  0x401574 <explode_bomb>      //Lets set breakpoint here as safety!
   0x00000000004015e7 <+61>:    add    $0x18,%rsp
   0x00000000004015eb <+65>:    retq   
End of assembler dump.

Lets check what 0x402799 is:

(gdb) x/s 0x402799
0x402799:       "%d %d %d %d %d %d"
(gdb) 

# From the above we can say that we have got total of 6 ditgits with sapace in between for phase 2 solution.



Lets look at what the compare statement is comparing:
gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400f0c <+0>:     push   %rbp
   0x0000000000400f0d <+1>:     push   %rbx
   0x0000000000400f0e <+2>:     sub    $0x28,%rsp
   0x0000000000400f12 <+6>:     mov    %rsp,%rsi
   0x0000000000400f15 <+9>:     callq  0x4015aa <read_six_numbers>
   0x0000000000400f1a <+14>:    cmpl   $0x1,(%rsp)
   0x0000000000400f1e <+18>:    je     0x400f40 <phase_2+52>
   0x0000000000400f20 <+20>:    callq  0x401574 <explode_bomb>
   0x0000000000400f25 <+25>:    jmp    0x400f40 <phase_2+52>
   0x0000000000400f27 <+27>:    mov    -0x4(%rbx),%eax
   0x0000000000400f2a <+30>:    add    %eax,%eax
=> 0x0000000000400f2c <+32>:    cmp    %eax,(%rbx)
   0x0000000000400f2e <+34>:    je     0x400f35 <phase_2+41>
   0x0000000000400f30 <+36>:    callq  0x401574 <explode_bomb>
   0x0000000000400f35 <+41>:    add    $0x4,%rbx
   0x0000000000400f39 <+45>:    cmp    %rbp,%rbx
   0x0000000000400f3c <+48>:    jne    0x400f27 <phase_2+27>
   0x0000000000400f3e <+50>:    jmp    0x400f4c <phase_2+64>
   0x0000000000400f40 <+52>:    lea    0x4(%rsp),%rbx
   0x0000000000400f45 <+57>:    lea    0x18(%rsp),%rbp
   0x0000000000400f4a <+62>:    jmp    0x400f27 <phase_2+27>
   0x0000000000400f4c <+64>:    add    $0x28,%rsp
   0x0000000000400f50 <+68>:    pop    %rbx
   0x0000000000400f51 <+69>:    pop    %rbp
   0x0000000000400f52 <+70>:    retq   
End of assembler dump.

(gdb) i r
rax            0x2      2
rbx            0x7fffffffe494   140737488348308    //lets examine this
rcx            0x7fffffffe480   140737488348288
rdx            0x7fffffffe4a4   140737488348324
rsi            0x7fffffffde70   140737488346736
rdi            0x1999999999999999       1844674407370955161
rbp            0x7fffffffe4a8   0x7fffffffe4a8
rsp            0x7fffffffe490   0x7fffffffe490
r8             0x7ffff7dd5060   140737351864416
r9             0x0      0

(gdb) x/d 140737488348308
0x7fffffffe494: 2



   0x0000000000400f27 <+27>:    mov    -0x4(%rbx),%eax
   0x0000000000400f2a <+30>:    add    %eax,%eax
   0x0000000000400f2c <+32>:    cmp    %eax,(%rbx)
   0x0000000000400f2e <+34>:    je     0x400f35 <phase_2+41>
=> 0x0000000000400f30 <+36>:    callq  0x401574 <explode_bomb>
   0x0000000000400f35 <+41>:    add    $0x4,%rbx
   0x0000000000400f39 <+45>:    cmp    %rbp,%rbx
   
Looking at <+30>, we see we are essentially doubling whatever was in %eax before when %eax = 2, it changed to 4. So basically we 
can say that the %eax value keep on doubling so therefor we know the digit input must be 6 so we can conclude that the digit 
(solution for phase_2) is "1 2 4 8 16 32" 


//Solution:
1 2 4 8 16 32





